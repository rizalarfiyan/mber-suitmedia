/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'

const WorkLazyRouteImport = createFileRoute('/work')()
const ServicesLazyRouteImport = createFileRoute('/services')()
const IdeasLazyRouteImport = createFileRoute('/ideas')()
const ContactLazyRouteImport = createFileRoute('/contact')()
const CareersLazyRouteImport = createFileRoute('/careers')()
const AboutLazyRouteImport = createFileRoute('/about')()
const IndexLazyRouteImport = createFileRoute('/')()

const WorkLazyRoute = WorkLazyRouteImport.update({
  id: '/work',
  path: '/work',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/work.lazy').then((d) => d.Route))
const ServicesLazyRoute = ServicesLazyRouteImport.update({
  id: '/services',
  path: '/services',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/services.lazy').then((d) => d.Route))
const IdeasLazyRoute = IdeasLazyRouteImport.update({
  id: '/ideas',
  path: '/ideas',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/ideas.lazy').then((d) => d.Route))
const ContactLazyRoute = ContactLazyRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/contact.lazy').then((d) => d.Route))
const CareersLazyRoute = CareersLazyRouteImport.update({
  id: '/careers',
  path: '/careers',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/careers.lazy').then((d) => d.Route))
const AboutLazyRoute = AboutLazyRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))
const IndexLazyRoute = IndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/careers': typeof CareersLazyRoute
  '/contact': typeof ContactLazyRoute
  '/ideas': typeof IdeasLazyRoute
  '/services': typeof ServicesLazyRoute
  '/work': typeof WorkLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/careers': typeof CareersLazyRoute
  '/contact': typeof ContactLazyRoute
  '/ideas': typeof IdeasLazyRoute
  '/services': typeof ServicesLazyRoute
  '/work': typeof WorkLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/careers': typeof CareersLazyRoute
  '/contact': typeof ContactLazyRoute
  '/ideas': typeof IdeasLazyRoute
  '/services': typeof ServicesLazyRoute
  '/work': typeof WorkLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/careers'
    | '/contact'
    | '/ideas'
    | '/services'
    | '/work'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/careers'
    | '/contact'
    | '/ideas'
    | '/services'
    | '/work'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/careers'
    | '/contact'
    | '/ideas'
    | '/services'
    | '/work'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AboutLazyRoute: typeof AboutLazyRoute
  CareersLazyRoute: typeof CareersLazyRoute
  ContactLazyRoute: typeof ContactLazyRoute
  IdeasLazyRoute: typeof IdeasLazyRoute
  ServicesLazyRoute: typeof ServicesLazyRoute
  WorkLazyRoute: typeof WorkLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/work': {
      id: '/work'
      path: '/work'
      fullPath: '/work'
      preLoaderRoute: typeof WorkLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/services': {
      id: '/services'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof ServicesLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ideas': {
      id: '/ideas'
      path: '/ideas'
      fullPath: '/ideas'
      preLoaderRoute: typeof IdeasLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/careers': {
      id: '/careers'
      path: '/careers'
      fullPath: '/careers'
      preLoaderRoute: typeof CareersLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AboutLazyRoute: AboutLazyRoute,
  CareersLazyRoute: CareersLazyRoute,
  ContactLazyRoute: ContactLazyRoute,
  IdeasLazyRoute: IdeasLazyRoute,
  ServicesLazyRoute: ServicesLazyRoute,
  WorkLazyRoute: WorkLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
