/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as PublicRouteImport } from './routes/_public'

const PublicIndexLazyRouteImport = createFileRoute('/_public/')()
const PublicWorkLazyRouteImport = createFileRoute('/_public/work')()
const PublicServicesLazyRouteImport = createFileRoute('/_public/services')()
const PublicIdeasLazyRouteImport = createFileRoute('/_public/ideas')()
const PublicContactLazyRouteImport = createFileRoute('/_public/contact')()
const PublicCareersLazyRouteImport = createFileRoute('/_public/careers')()
const PublicAboutLazyRouteImport = createFileRoute('/_public/about')()

const PublicRoute = PublicRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicIndexLazyRoute = PublicIndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicRoute,
} as any).lazy(() => import('./routes/_public/index.lazy').then((d) => d.Route))
const PublicWorkLazyRoute = PublicWorkLazyRouteImport.update({
  id: '/work',
  path: '/work',
  getParentRoute: () => PublicRoute,
} as any).lazy(() => import('./routes/_public/work.lazy').then((d) => d.Route))
const PublicServicesLazyRoute = PublicServicesLazyRouteImport.update({
  id: '/services',
  path: '/services',
  getParentRoute: () => PublicRoute,
} as any).lazy(() =>
  import('./routes/_public/services.lazy').then((d) => d.Route),
)
const PublicIdeasLazyRoute = PublicIdeasLazyRouteImport.update({
  id: '/ideas',
  path: '/ideas',
  getParentRoute: () => PublicRoute,
} as any).lazy(() => import('./routes/_public/ideas.lazy').then((d) => d.Route))
const PublicContactLazyRoute = PublicContactLazyRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => PublicRoute,
} as any).lazy(() =>
  import('./routes/_public/contact.lazy').then((d) => d.Route),
)
const PublicCareersLazyRoute = PublicCareersLazyRouteImport.update({
  id: '/careers',
  path: '/careers',
  getParentRoute: () => PublicRoute,
} as any).lazy(() =>
  import('./routes/_public/careers.lazy').then((d) => d.Route),
)
const PublicAboutLazyRoute = PublicAboutLazyRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => PublicRoute,
} as any).lazy(() => import('./routes/_public/about.lazy').then((d) => d.Route))

export interface FileRoutesByFullPath {
  '/about': typeof PublicAboutLazyRoute
  '/careers': typeof PublicCareersLazyRoute
  '/contact': typeof PublicContactLazyRoute
  '/ideas': typeof PublicIdeasLazyRoute
  '/services': typeof PublicServicesLazyRoute
  '/work': typeof PublicWorkLazyRoute
  '/': typeof PublicIndexLazyRoute
}
export interface FileRoutesByTo {
  '/about': typeof PublicAboutLazyRoute
  '/careers': typeof PublicCareersLazyRoute
  '/contact': typeof PublicContactLazyRoute
  '/ideas': typeof PublicIdeasLazyRoute
  '/services': typeof PublicServicesLazyRoute
  '/work': typeof PublicWorkLazyRoute
  '/': typeof PublicIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_public': typeof PublicRouteWithChildren
  '/_public/about': typeof PublicAboutLazyRoute
  '/_public/careers': typeof PublicCareersLazyRoute
  '/_public/contact': typeof PublicContactLazyRoute
  '/_public/ideas': typeof PublicIdeasLazyRoute
  '/_public/services': typeof PublicServicesLazyRoute
  '/_public/work': typeof PublicWorkLazyRoute
  '/_public/': typeof PublicIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/about'
    | '/careers'
    | '/contact'
    | '/ideas'
    | '/services'
    | '/work'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/about'
    | '/careers'
    | '/contact'
    | '/ideas'
    | '/services'
    | '/work'
    | '/'
  id:
    | '__root__'
    | '/_public'
    | '/_public/about'
    | '/_public/careers'
    | '/_public/contact'
    | '/_public/ideas'
    | '/_public/services'
    | '/_public/work'
    | '/_public/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  PublicRoute: typeof PublicRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexLazyRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/work': {
      id: '/_public/work'
      path: '/work'
      fullPath: '/work'
      preLoaderRoute: typeof PublicWorkLazyRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/services': {
      id: '/_public/services'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof PublicServicesLazyRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/ideas': {
      id: '/_public/ideas'
      path: '/ideas'
      fullPath: '/ideas'
      preLoaderRoute: typeof PublicIdeasLazyRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/contact': {
      id: '/_public/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof PublicContactLazyRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/careers': {
      id: '/_public/careers'
      path: '/careers'
      fullPath: '/careers'
      preLoaderRoute: typeof PublicCareersLazyRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/about': {
      id: '/_public/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof PublicAboutLazyRouteImport
      parentRoute: typeof PublicRoute
    }
  }
}

interface PublicRouteChildren {
  PublicAboutLazyRoute: typeof PublicAboutLazyRoute
  PublicCareersLazyRoute: typeof PublicCareersLazyRoute
  PublicContactLazyRoute: typeof PublicContactLazyRoute
  PublicIdeasLazyRoute: typeof PublicIdeasLazyRoute
  PublicServicesLazyRoute: typeof PublicServicesLazyRoute
  PublicWorkLazyRoute: typeof PublicWorkLazyRoute
  PublicIndexLazyRoute: typeof PublicIndexLazyRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicAboutLazyRoute: PublicAboutLazyRoute,
  PublicCareersLazyRoute: PublicCareersLazyRoute,
  PublicContactLazyRoute: PublicContactLazyRoute,
  PublicIdeasLazyRoute: PublicIdeasLazyRoute,
  PublicServicesLazyRoute: PublicServicesLazyRoute,
  PublicWorkLazyRoute: PublicWorkLazyRoute,
  PublicIndexLazyRoute: PublicIndexLazyRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  PublicRoute: PublicRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
